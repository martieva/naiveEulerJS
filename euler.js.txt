'use scrict';
var bigInt = require("big-integer");
//Multiples of 3 and 5.
//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//Find the sum of all the multiples of 3 or 5 below 1000.
function solutionOne(){
  return loopSum(0, 1000, (i, sum)=>{
      if(i % 3 === 0 || i % 5 === 0){
        sum += i;
      }
      return sum;
  });
}
module.exports.solutionOne = solutionOne;

function loopSum(start, end, func){
  var sum = 0;
  for(var i = start; i < end; i++){
    sum = func(i, sum);
  }
  return sum;
}

function solutionOneAsync(){
  var threes = new Promise(function(resolve, reject){
    var sum = 0;
    var i = 3;
    while(i<1000){
      sum +=i;
      i+=3;
    }
    resolve(sum);
  });
  var fives = new Promise(function(resolve, reject){
    var sum = 0;
    var i = 5;
    while(i<1000){
      if((i)%3!=0){
        sum+=i;
      }
      i+=5;
    }
    resolve(sum);
  });
  Promise.all([threes, fives]).then(function(values){
    console.log(values[0] + values[1]);
  });

}
module.exports.solutionOneAsync = solutionOneAsync;

//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
function solutionTwo(){
  var last = 0;
  var current = 1;
  var next = 0;
  var evenSum = 0;
  while((next = current + last)<4000000){
    if(next%2==0){
      evenSum += next;
    }
    last = current;
    current = next;
  }
  return evenSum;
}
module.exports.solutionTwo = solutionTwo;

//The prime factors of 13195 are 5, 7, 13 and 29.
//What is the largest prime factor of the number 600851475143 ?
function solutionThree(){
  var x = 600851475143;
  var z = Math.ceil(x/2);
  z = z % 2 == 0 ? z - 1 : z;
  var l = 0;
  factor:for(i = z; i > 0; i-=2){//Skip over all even numbers as they can't be prime
      l++;
      if(l==100000000){//Cheaper than i%n==0
        l=0;
        global.gc();//Run with option --expose-gc
      }


    if(x%i==0){//is factor
      for(k = 3; k < Math.sqrt(i); k++){//I is always odd so never divisible by 2 so can start at 3
        //Only need to check up to the sqrt. If k > sqrt then we have already checked the possibilities
        if(i%k==0){//!prime
          continue factor;
        }
      }
      return i;//prime
    }
  }
}
module.exports.solutionThree = solutionThree;

//A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
//Find the largest palindrome made from the product of two 3-digit numbers.
function solutionFour(){
  var multiplicand = 999;
  var multiplier = 999;
  var result = 0;
  var product = 0;
  outer:for(multiplicand; multiplicand>99; multiplicand--){
    multiplier=multiplicand;//Don't need to reset it all the way to 999 as we would be repeating combinations.
    if(multiplicand*multiplier<result){
      return result;//Short circuit if there is no possibility of getting higher than what we already have.
    }
    for(multiplier; multiplier>99; multiplier--){
      product = multiplicand*multiplier;
      if(product>result){//Have this check on the outside since the palindrome check is more expensive.
        if(isPalindrome(product)){
          result = product;
          continue outer;
        }
      }
    }//inner
  }//outer
  return result;

}
module.exports.solutionFour = solutionFour;

function isPalindrome(num){
  var tokens = [];
  while(num > 0){//Tokenize

    num/=10;
    var token = (num%1).toFixed(1);
    tokens.push(token);
    num -= token;
  }
  var j = tokens.length-1;
  for(var i = 0; i <= j; i++, j--){
    if(tokens[i]!==tokens[j]){
      return false;
    }
  }
  return true;
}

//2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
//What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
function solutionFive(){
  //Modulus is expensive so try to cut down on its use.
  //The last digit must be a 0
  //Sum of digits must be divisible by 9. Difficult to reverse engineer so will have to check each number.
      //Will just be easier to see if divisible my 9.
  //Second digit must be a 2 4 6 or 8
  //The last three digits must be divisible by 8
  //Difference of sums of alternating digits must equal 11
  //Start with 360 and always add 360 to always be in line with first 10 rules (except 7)
  let baseNum = (()=>{
    let b = 20;//Start at 20, covers 10, 5, 2
    while(b%18!=0 || b%16!=0 || b%15!=0 || b%14!=0){//18 will cover 9, 6, 4, 3, 16 will cover 8, 14 will cover 7
      b+=20;
    }
    return b;
  })();
  baseNum/=10;//Remove the zero from the end
  //(Rules for primes deal with subtracting the last digit from the rest of the number to see if the differnce is divisible by the prime)
  //(Since we know the last digit must be zero then the subtraction plays no role so we can check the primes against the truncated number)
  let num = baseNum;
  while(num%11!=0 || num%13!=0 || num%17!=0 || num%19!=0){//Then do the primes
    num+=baseNum;//Always add baseNum to stay lined up with all non-prime numbers (and 7)
  }
  num*=10;//Add the zero back to the end. This cuts our time in about half
  return num;

}
module.exports.solutionFive = solutionFive;

//The difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.
//Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
function solutionSix(){
  let sqrs = 0;
  let sum = 0;
  for(let i = 1; i <= 100; i++){
    sum += i;
    sqrs += i*i;
  }
  sum = sum*sum;
  return sum-sqrs;
}
module.exports.solutionSix = solutionSix;

//By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
//What is the 10001st prime number?
function solutionSeven(){
  var f = bigInt(factorial(1000));
  return bigInt(f).plus(1);
}
function factorial(n){
  var nF = bigInt(1);
  for(let i = n; i > 0; i--){
    nF = bigInt(nF).times(i);
  }
  return nF;
}
module.exports.solutionSeven = solutionSeven;